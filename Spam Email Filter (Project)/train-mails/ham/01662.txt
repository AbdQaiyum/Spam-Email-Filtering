jeremy hylton
 i think one step towards deployment is creating a reusable tokenizer
 for mail messages  the current codebase doesnt expose an easytouse
 or easytocustomize tokenizer

tokenize couldnt be easier to use  it takes a string argument and
produces a stream of tokens whether via explicit list or generator or
tuple or  doesnt matter  all the tokenize functions in gbayespy
and timtestpy are freely interchangeable this way

note that we have no evidence to support that a customizable tokenizer would
do any good or if it would in which ways customization could be helpful
thats a research issue on which no work has been done

 the timtest module seems to contain an enormous body of practical
 knowledge about how to parse mail messages but the module wasnt
 designed for reuse

thats partly a failure of imagination wink  splitting out all knowledge
of tokenization is just a large block cutandpaste  there its done
change the

    from timtoken import tokenize

at the top to use any other tokenizer now  if you want to make it easier
still feel free to check in something better

 id like to see a module that can take a single message or a collection of
 messages and tokenize each one

the msg and msgstream classes in timtestpy are a start at that but its
hard to do anything truly useful here when people use all sorts of
different physical representations for email msgs mboxes in various
formats one file per folder one file per msg skips gzipped gimmick
  if youre a python coder wink you should find it very easy to
change the guts of msg and msgstream to handle your peculiar scheme
defining interfaces for these guys should be done

 id like to see the tokenize by customizable too  tim had to exclude
 some headers from his test data because there were particular biases
 in the test data  if other people have test data without those
 biases they ought to be able to customize the tokenizer to include
 them or exclude others

this sounds like a bottomless pit to me and theres no easier way to
customize than to edit the code  as readmetxt still says though massive
refactoring would help  hop to it

