i have some patches that seem to fixavoid this problem now   it is
amazing what one can achieve when mains power fails long enough for
upss to run out and all that is left operational is the laptop and
its battery supply

first i put in some defensive code into the area where the problem was
occurring so that if exmh is attempting for any reason to expand a
sequence that isnt either a number or a range of numbers or a list of
such things it will simply ignore the trash rather than giving a traceback
this one solves the initial problem

 mhtclwas	thu aug   
 mhtcl	wed aug   
   
     set seq 
     set rseq 
     foreach range split string trim sequence 
	if regexp  range 
	     just ignore anything bogus
	    continue
	
 	set parts split string trim range 
 	if llength parts   
 	    lappend seq parts


that is amending proc mhseqexpand which is where the error was occurring
before the code assumes that range is either nnn or nnnmmm so we should
probably make sure thats true  issue an error instead of just continue
if you like but i dont think an error is needed

but that just allowed me to create a similar problem in another place
by typing nnn  and rather than continue to fight fires like this
i thought i should think more about brents suggestion   but rather than
have the selection code actually validate the input which would mean it
would have to know what is to be valid i decided that the right thing to
do is just to ignore any errors caused by invalid input so i just stuck
a catch around the msgshow that is processing the nonsense that the
user has typed

this way any later expansion to what msgshow treats as legal maybe
allowing a sequence name like prev or next or anything else can
be handled just there without someone needing to remember that they have
to go fix the selection processing code to allow it

but while i was playing there i noticed something i never new before
if you type  the  changes to  and so on for each  that
is typed   i suspect thats perhaps an artifact of  is bound to a
different function so it can be used as a toggle between changing the
current and the target folder but it has to mean something if the current
input mode is a message number so let it mean but now i found it
i think its nice    but if we can type  why not  as well  that
kind of limitation bugs me so i fixed it

and then i wondered about folders with names containing   the special
use of  as the toggle character means theres no way to type those from
the keyboard   so i fixed that as well   this makes two different
restrictions  theres no way to type a folder name that has a name
beginning with  but such a thing in mh would be a pain to use anyway
so i doubt this will bother anyone and it is now only possible to
toggle between typing the current  target folder name when the name
being typed is empty   im less happy about that part but i think i
can live with it in order to allow folder names with s in them to
exist and be typed

then since i was there anyway i decided to do something about another
feature that has always bugged me   in normal keyboard mode s is
the key used to show a message    but if youve just typed  and
the ftoc is highlighting  as the current message and you want to now
show that message you cant type s you have to type r instead
so i fixed this one as well   fixed here is in quotes as it assumes
that the keybinding for msgshow is s if you change that to something
else it will remain s in here   i dont know enough tktcl to have it
discover what key is bound to a function in the external world in order
to bind the same one here   r continues to work of course

and now i got started in fixing irritants in this code i also made it
clear the status line if you abort messagefolder entry mode c or g
previously it used to leave the prompt sitting there until the next
message appeared which made it less than obvious that the keyboard had
reverted to its usual bindings

in any case what follows is the patch that does all of that   i believe
that if you apply this then the one above is probably not needed the
catch around the msgshow will hide the problem i dont think we really
need to fix brents way of invoking it   or include it anyway just
for completeness i havent run an exmh with the following patch but not
the previous one so i dont know for sure that all will be ok then

kre

 selecttclwas	thu aug   
 selecttcl	wed aug   
   
     bindtags w list w entry
     bind w anykey	selecttypein w a
     bind w keyplus	selecttoggle w 
    bind w keyminus	selectprev w 
     bind w space	selectcomplete w
     bind w tab	selectcomplete w
     bind w return	selectreturn w
    bind w keys	selectreturn w a
     bind w backspace	selectbackspace w
     bind w controlh	selectbackspace w
     bind w delete	selectbackspace w
   
     append selectsel a
     exmhstatus selectprompt selectsel
     if info exists selectfolder 
	msgchange selectsel noshow
	catch  msgchange selectsel noshow 
     
 
 proc selectbackspace  w  
   
 proc selecttoggle w 
     global select
     if info exists selectfolder 
	if selectsel   
	    selecttypein w 
	    return
	
 	set selecttoggle list lindex selecttoggle  lindex selecttoggle 
 	set selectprompt lindex selecttoggle  folder
      else 
   
     
     exmhstatus selectprompt selectsel
 
proc selectprev w 
    global select
    if info exists selectfolder 
	selecttypein w 
     else 
	catch 
	    incr selectsel 
	    msgchange selectsel noshow
	
        exmhstatus selectprompt selectsel
    

 proc selectcomplete  w  
     global select
     if info exists selectfolder 
   
 	exmhstatus selectprompt selectsel
     
 
proc selectreturn  w  
proc selectreturn  w a   
     global select
     if info exists selectfolder 
	if a   
	    selecttypein w a
	    return
	
 	if info exists selectmatch 
 	    set selectsel selectmatch
 	    unset selectmatch
   
 	unset selectfolder
     
     selectentry configure state disabled
    exmhstatus 
     exmhfocus
 
 proc selectclear  w  





exmhworkers mailing list
exmhworkersredhatcom
httpslistmanredhatcommailmanlistinfoexmhworkers

